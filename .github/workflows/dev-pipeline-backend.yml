name: Docker Build, Push and Deploy
on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
jobs:
  build:
    name: Build & push docker image
    runs-on: ubuntu-latest
    outputs:
      APP_VERSION: '${{steps.version-selector.outputs.version}}'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: corretto
      - name: Make mvnw executable
        run: chmod +x ./mvnw
      - name: Running Unit Tests
        run: |
          ./mvnw clean compile install
      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: '${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}'
          tags: |
            # For release tags (e.g., release-1.0.0)
            type=match,pattern=release-(.*),group=1
            type=match,pattern=release-(\d+.\d+).*,group=1
            type=match,pattern=release-(\d+.\d+).*,group=1

            # For branches (e.g., main -> main, feature/xyz -> feature-xyz)
            type=ref,event=branch

            # For pull requests (PR-123)
            type=ref,event=pr
      - name: Set Version
        id: version-selector
        run: echo "version=$DOCKER_METADATA_OUTPUT_VERSION" >> "$GITHUB_OUTPUT"
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: '${{ secrets.DOCKERHUB_USERNAME }}'
          password: '${{ secrets.DOCKERHUB_TOKEN }}'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: images/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=$DOCKER_METADATA_OUTPUT_VERSION      

  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@v1.1.0
        env:
          VAULT_DEV_ADDR: ${{secrets.VAULT_DEV_ADDR }}
          VAULT_DEV_TOKEN: ${{secrets.VAULT_DEV_TOKEN }}
        with:
          host: '${{ secrets.VPS_IP }}'
          username: '${{ secrets.VPS_USERNAME }}'
          key: '${{ secrets.SSH_PRIVATE_KEY }}'
          port: '${{ secrets.SSH_PORT }}'
          envs: VAULT_DEV_ADDR,VAULT_DEV_TOKEN
          script: |
            export IMAGE_DEV_VERSION=${{ needs.build.outputs.APP_VERSION }}
            echo "Image version: $IMAGE_DEV_VERSION"
            export VAULT_DEV_SECRET_ID=$(curl --silent \
              --request POST \
              --header "X-Vault-Token: ${VAULT_DEV_TOKEN}" \
              --data '{}' \
              "${VAULT_DEV_ADDR}/v1/auth/approle/role/backend-service/secret-id" \
              | jq -r '.data.secret_id')
            export VAULT_DEV_ROLE_ID=$(curl --silent \
              --request GET \
              --header "X-Vault-Token: ${VAULT_DEV_TOKEN}" \
              "${VAULT_DEV_ADDR}/v1/auth/approle/role/backend-service/role-id" \
              | jq -r '.data.role_id')

            echo "Role id is: $VAULT_DEV_ROLE_ID"
            cd /home/teamsphere/projects/teamsphere-deployment
            
            # Docker login
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin            
            docker pull bravinr/teamsphere:$IMAGE_DEV_VERSION
            docker compose up -d spring-app-dev